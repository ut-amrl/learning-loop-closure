/* Auto-generated by genmsg_cpp for file /home/kavan/Research/learning-loop-closure/point_cloud_embedder/srv/GetPointCloudEmbedding.srv */
#ifndef POINT_CLOUD_EMBEDDER_SERVICE_GETPOINTCLOUDEMBEDDING_H
#define POINT_CLOUD_EMBEDDER_SERVICE_GETPOINTCLOUDEMBEDDING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/PointCloud2.h"



namespace point_cloud_embedder
{
template <class ContainerAllocator>
struct GetPointCloudEmbeddingRequest_ {
  typedef GetPointCloudEmbeddingRequest_<ContainerAllocator> Type;

  GetPointCloudEmbeddingRequest_()
  : cloud()
  {
  }

  GetPointCloudEmbeddingRequest_(const ContainerAllocator& _alloc)
  : cloud(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  cloud;


  typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetPointCloudEmbeddingRequest
typedef  ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<std::allocator<void> > GetPointCloudEmbeddingRequest;

typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingRequest> GetPointCloudEmbeddingRequestPtr;
typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingRequest const> GetPointCloudEmbeddingRequestConstPtr;



template <class ContainerAllocator>
struct GetPointCloudEmbeddingResponse_ {
  typedef GetPointCloudEmbeddingResponse_<ContainerAllocator> Type;

  GetPointCloudEmbeddingResponse_()
  : embedding()
  {
  }

  GetPointCloudEmbeddingResponse_(const ContainerAllocator& _alloc)
  : embedding(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _embedding_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  embedding;


  typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetPointCloudEmbeddingResponse
typedef  ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<std::allocator<void> > GetPointCloudEmbeddingResponse;

typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingResponse> GetPointCloudEmbeddingResponsePtr;
typedef boost::shared_ptr< ::point_cloud_embedder::GetPointCloudEmbeddingResponse const> GetPointCloudEmbeddingResponseConstPtr;


struct GetPointCloudEmbedding
{

typedef GetPointCloudEmbeddingRequest Request;
typedef GetPointCloudEmbeddingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetPointCloudEmbedding
} // namespace point_cloud_embedder

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96cec5374164b3b3d1d7ef5d7628a7ed";
  }

  static const char* value(const  ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96cec5374164b3b3ULL;
  static const uint64_t static_value2 = 0xd1d7ef5d7628a7edULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "point_cloud_embedder/GetPointCloudEmbeddingRequest";
  }

  static const char* value(const  ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud2 cloud\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
";
  }

  static const char* value(const  ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b2fe64d0918b001fee3435866a0d2530";
  }

  static const char* value(const  ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb2fe64d0918b001fULL;
  static const uint64_t static_value2 = 0xee3435866a0d2530ULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "point_cloud_embedder/GetPointCloudEmbeddingResponse";
  }

  static const char* value(const  ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] embedding\n\
\n\
";
  }

  static const char* value(const  ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cloud);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct GetPointCloudEmbeddingRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.embedding);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct GetPointCloudEmbeddingResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<point_cloud_embedder::GetPointCloudEmbedding> {
  static const char* value() 
  {
    return "a2c07223ab3a99859d0995f0e704a95c";
  }

  static const char* value(const point_cloud_embedder::GetPointCloudEmbedding&) { return value(); } 
};

template<>
struct DataType<point_cloud_embedder::GetPointCloudEmbedding> {
  static const char* value() 
  {
    return "point_cloud_embedder/GetPointCloudEmbedding";
  }

  static const char* value(const point_cloud_embedder::GetPointCloudEmbedding&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a2c07223ab3a99859d0995f0e704a95c";
  }

  static const char* value(const point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "point_cloud_embedder/GetPointCloudEmbedding";
  }

  static const char* value(const point_cloud_embedder::GetPointCloudEmbeddingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a2c07223ab3a99859d0995f0e704a95c";
  }

  static const char* value(const point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "point_cloud_embedder/GetPointCloudEmbedding";
  }

  static const char* value(const point_cloud_embedder::GetPointCloudEmbeddingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // POINT_CLOUD_EMBEDDER_SERVICE_GETPOINTCLOUDEMBEDDING_H

